import * as React from "react";

import {Chart} from 'chart.js';

import {Theme, withStyles, WithStyles} from "@material-ui/core";


const styles = (theme:Theme) => ({
  chartWrapper: {
    position: "relative" as "relative"
  },
  canvas: {
    position: "absolute" as "absolute",
    left: 0,
    top: 0,
    pointerEvents: "none" as "none",
  },
  chartAreaWrapper: {
    width: '100%',
    //width: '3000px',
    overflowX: "scroll" as "scroll"
  }
});

function addData(numData:number, chart:Chart, wrapper:HTMLDivElement) {
  for (var i = 0; i < numData; i++) {
    // @ts-ignore
    chart.data.datasets[0].data.push(Math.random() * 100);
    // @ts-ignore
    chart.data.labels.push("Label" + i);

    // @ts-ignore
    wrapper.style.width = "1200px";
  }
}

interface HitsChartProps {
  data: HitsData;
}

//         <canvas ref={this.chart} className={chart} width={400} height={400}/>
class HitsChart extends React.Component<HitsChartProps> {

  private chart = React.createRef<HTMLCanvasElement>();
  private axis = React.createRef<HTMLCanvasElement>();
  private wrapper = React.createRef<HTMLDivElement>();
  private chartInstance?:Chart = undefined;


  public render() {
    const {classes:{chartWrapper, canvas, chartAreaWrapper}} = this.props as HitsChartProps & WithStyles<typeof styles>;

    return (
      <div className={chartWrapper}>
        <div className={chartAreaWrapper}>
          <div ref={this.wrapper}>
            <canvas ref={this.chart} height="300" width="1200"/>
          </div>
        </div>
        <canvas ref={this.axis} height="300" width="0" className={canvas}/>
      </div>
    )
  }

  public componentDidMount(): void {
    const chartCanvas = this.chart.current;
    const axis = this.axis.current;

    const chartData = {
      datasets: [{
        label: "Test Data Set",
        data: this.props.data.data
      }]
    };

    let rectangleSet = false;

    // @ts-ignore
    const chartTest = new Chart(chartCanvas, {
      type: "scatter",
      data: chartData,
      maintainAspectRatio: false,
      responsive: true,
      options: {
        scales: {
          xAxes: [{
            type: 'time',
            //position: 'bottom'
          }]
        },
        /*tooltips: {
          titleFontSize: 0,
          titleMarginBottom: 0,
          bodyFontSize: 12
        },
        legend: {
          display: false
        },
        scales: {
          xAxes: [{
            ticks: {
              fontSize: 12,
              display: true,
              beginAtZero: false
            }
          }],
          yAxes: [{
            ticks: {
              fontSize: 12,
              beginAtZero: true
            }
          }]
        },*/
        animation: {
          onComplete: function () {
            if (!rectangleSet) {
              var scale = window.devicePixelRatio;

              debugger;
              // @ts-ignore
              var sourceCanvas = chartTest.chart.canvas;
              // @ts-ignore
              var copyWidth = chartTest.scales['y-axis-1'].width - 10;
              // @ts-ignore
              var copyHeight = chartTest.scales['y-axis-1'].height + chartTest.scales['y-axis-1'].top + 10;

              // @ts-ignore
              var targetCtx = axis.getContext("2d");

              // @ts-ignore
              targetCtx.scale(scale, scale);
              // @ts-ignore
              targetCtx.canvas.width = copyWidth * scale;
              // @ts-ignore
              targetCtx.canvas.height = copyHeight * scale;

              // @ts-ignore
              targetCtx.canvas.style.width = `${copyWidth}px`;
              // @ts-ignore
              targetCtx.canvas.style.height = `${copyHeight}px`;
              // @ts-ignore
              targetCtx.drawImage(sourceCanvas, 0, 0, copyWidth * scale, copyHeight * scale, 0, 0, copyWidth * scale, copyHeight * scale);

              var sourceCtx = sourceCanvas.getContext('2d');

              // Normalize coordinate system to use css pixels.

              sourceCtx.clearRect(0, 0, copyWidth * scale, copyHeight * scale);
              rectangleSet = true;
            }
          },
          onProgress: function () {
            if (rectangleSet === true) {
              // @ts-ignore
              var copyWidth = chartTest.scales['y-axis-1'].width;
              // @ts-ignore
              var copyHeight = chartTest.scales['y-axis-1'].height + chartTest.scales['y-axis-1'].top + 10;

              // @ts-ignore
              var sourceCtx = chartTest.chart.canvas.getContext('2d');
              sourceCtx.clearRect(0, 0, copyWidth, copyHeight);
            }
          }
        }
      }
    });
    this.chartInstance = chartTest;
    // @ts-ignore
    axis.style.width = "4000px";
  }

  public componentWillUnmount(): void {
    if (this.chartInstance) {
      this.chartInstance.destroy();
    }
  }
}

export default withStyles(styles)(HitsChart);
